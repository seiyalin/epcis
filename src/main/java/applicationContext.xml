<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
  <!-- 导入外部的properties配置文件 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- 配置c3p0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="jdbcUrl" value="${jdbcUrl}"></property>
		<property name="driverClass" value="${driverClass}"></property>
		<property name="user" value="${user}"></property>
		<property name="password" value="${password}"></property>
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${initialPoolSize}"></property>
		<!--连接池中保留的最小连接数。Default: 3 -->
		<property name="minPoolSize" value="3"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${maxPoolSize}"></property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3"></property>
		<!--最大空闲时间，1800秒内未使用则连接被丢弃，若为0则永不丢弃。Default: 0 -->
	    <property name="maxIdleTime" value="1800"></property>
	    
	   
	</bean>
	

	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<!-- 设置 hibernate的数据库方言-->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<!-- 设置 在控制台输出由hibernate生成的SQL语句-->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				<!-- 防止连接一下子就满了，不够用了  20170105添加的-->
			     <prop key="hibernate.connection.release_mode">after_statement</prop>
			</props>
		</property>
		<!-- 指定hibernate所有映射文件路径-->
		<property name="mappingLocations">
			<list>
				<value>classpath:org/oliot/epcis/service/mysqlservice/*.hbm.xml</value>
				<value>classpath:org/oliot/model/mysqlservice/*.hbm.xml</value>
				<value>classpath:org/oliot/model/mysqlservice/role/*.hbm.xml</value>
				<value>classpath:org/oliot/model/mysqlservice/privilege/*.hbm.xml</value>
				<value>classpath:org/fudan/wuxi/syfw/model/feed/*.hbm.xml</value>
				
				<!-- 利用hibernate逆向工具生成实体类的路径 -->
				<value>classpath:org/fudan/wuxi/syfw/model/hibentity/*.hbm.xml</value>
			<!-- 	org.fudan.wuxi.syfw.model.feed -->
			<!-- 	org.oliot.model.mysqlservice.privilege -->
				<!-- <value>classpath:cn/itcast/test/entity/*.hbm.xml</value> -->
			</list>
		</property>
	</bean>
		<!-- 事务管理 -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
		<!-- Advice（通知）定义在连接点做什么，为切面增强提供织入接口 -->
	<!-- 事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
		 	<tx:method name="find*"  read-only="true"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="list*" read-only="true"/> 
			<tx:method name="*" rollback-for="Throwable"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- aop配置被事务控制的类 -->
    <aop:config>
    	<aop:pointcut id="serviceOperation" expression="execution(* org.oliot.epcis.service.mysqlservice.BaseService.*(..))"/><!-- AccountService 接口的任意方法的执行： -->
	<!-- <aop:pointcut id="serviceOperation" expression="execution(* cn.itcast..service.impl.*.*(..))"/> -->
    	<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
    </aop:config>

    
        <!-- 所有业务dao的parent -->
<!--         public abstract class HibernateDaoSupport extends DaoSupport {

	private HibernateTemplate hibernateTemplate;    
         -->
         <!--HibernateDaoSupport 中维护了hibernateTemplate，而hibernateTemplate 封装了对Hibernate Session的管理，免去了
         应用自己去实现与线程绑定，以及与事务管理相结合的重复工作 -->
         <!-- 此baseDao名字可以随意取 比如xDao，与模块中的baseDao没任何关系  只是负责一件事 那就是注入sessionFactory-->
    <bean id="baseDao"  abstract="true">
    	<property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
<!--     class="org.oliot.epcis.serde.mysql.dao.base.BaseDao" -->
    
     <bean id="userDao" class="org.oliot.epcis.serde.mysql.dao.user.impl.UserDao" parent="baseDao">
    </bean>
    
    <bean id="aquaticProductDao" class="org.fudan.wuxi.syfw.dao.feed.AquaticProductInfoDao" parent="baseDao">
    </bean>
    
    
      <bean id="roleDao" class="org.oliot.epcis.serde.mysql.dao.role.impl.RoleDao" parent="baseDao">
    </bean>
    
      <bean id="complaintDao" class="org.fudan.wuxi.syfw.dao.supervisor.ComplaintDao" parent="baseDao">
    </bean>
    
     <bean id="qandaDao" class="org.fudan.wuxi.syfw.dao.supervisor.QandADao" parent="baseDao">
    </bean>
    
    <!-- 使用注入方式 -->
 <!--     <bean id="userService" class="org.oliot.epcis.service.mysqlservice.user.UserService">
    </bean> -->
    
        <!-- 使用注入方式 -->
   <bean id="userService" class="org.oliot.epcis.service.mysqlservice.user.UserService">
    	<property name="userDao" ref="userDao"></property>
    </bean> 
    
    
      
        <!-- 使用注入方式 -->
   <bean id="roleService" class="org.oliot.epcis.service.mysqlservice.role.impl.RoleService">
    	<property name="roleDao" ref="roleDao"></property>
   </bean> 
   
       
        <!-- 使用注入方式 -->
   <bean id="proService" class="org.fudan.wuxi.syfw.service.feed.AquaticProductInfoService">
    	<property name="aquaticProductInfoDao" ref="aquaticProductDao"></property>
   </bean> 
      
        <!-- 使用设值注入方式 -->
   <bean id="supervisorService" class="org.fudan.wuxi.syfw.service.supervisor.SupervisorService">
    	<property name="complaintDao" ref="complaintDao"></property>
    	<property name="qandADao" ref="qandaDao"></property>
   </bean> 
<!--     
   <bean id="installer" class="org.oliot.util.Installer"></bean> -->
    
    
    
     <!--    <bean id="baseService" class="org.oliot.epcis.service.mysqlservice.impl.BaseServiceImpl">
    	<property name="baseDao" ref="baseDao"> </property>
    </bean>  -->

    
    <!-- 权限鉴定类 -->
<!--     <bean id="permissionCheck" class="cn.itcast.core.permission.impl.PermissionCheckImpl"></bean> -->
	 <context:component-scan base-package="org.oliot.epcis.service.mysqlservice.user"></context:component-scan> 
	 
	 <context:component-scan base-package="org.oliot.epcis.service.mysqlservice.role.impl"></context:component-scan> 
	 
	<context:component-scan base-package="org.fudan.wuxi.syfw.service.feed"></context:component-scan>  
    
    <context:component-scan base-package="org.fudan.wuxi.syfw.service.supervisor"></context:component-scan>  
    
    
    
    <!-- 引入外部sprign配置文件 -->
    <!-- 加载webservice配置文件 -->
    <!-- struts和spring的配置文件默认都放在action包下 -->
   <!--   <import resource="org/fudan/wuxi/syfw/action/trace/config/trace-spring.xml"/>  -->
     
     <import resource="org/fudan/wuxi/syfw/action/*/config/*-spring.xml"/> 
    
   	 <import resource="org/oliot/epcis/service/cxf-webservice-beans.xml"/> 
   	 <!-- 注意要用"/"路径，用" . "路径扫描不到 -->
   	 
   	 
   	 
  <!--   <import resource="org/oliot/epcis/service/mysqlservice/config/mysql-spring.xml"/> -->
    <!-- <import resource="classpath:cn/itcast/nsfw/*/conf/*-spring.xml"/> -->

</beans>
